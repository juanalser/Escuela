//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Main.cs
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class escuelaEntities : DbContext
    {
        public escuelaEntities()
            : base("name=escuelaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Administrador> Administradors { get; set; }
        public DbSet<estudiante> estudiantes { get; set; }
        public DbSet<Factura> Facturas { get; set; }
        public DbSet<Pago> Pagoes { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_BuscarEstudiante_Result> sp_BuscarEstudiante(string nombre, string servicio, string curso)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var servicioParameter = servicio != null ?
                new ObjectParameter("Servicio", servicio) :
                new ObjectParameter("Servicio", typeof(string));
    
            var cursoParameter = curso != null ?
                new ObjectParameter("Curso", curso) :
                new ObjectParameter("Curso", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BuscarEstudiante_Result>("sp_BuscarEstudiante", nombreParameter, servicioParameter, cursoParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_EditarAdministrador(Nullable<int> id, Nullable<int> inscripcion, Nullable<int> mensualidad)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var inscripcionParameter = inscripcion.HasValue ?
                new ObjectParameter("Inscripcion", inscripcion) :
                new ObjectParameter("Inscripcion", typeof(int));
    
            var mensualidadParameter = mensualidad.HasValue ?
                new ObjectParameter("Mensualidad", mensualidad) :
                new ObjectParameter("Mensualidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarAdministrador", idParameter, inscripcionParameter, mensualidadParameter);
        }
    
        public virtual int sp_EditarEstudiante(Nullable<int> id, string nombre, string padre, string madre, string tutor, string telefono, string movil, string año, string curso)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var padreParameter = padre != null ?
                new ObjectParameter("Padre", padre) :
                new ObjectParameter("Padre", typeof(string));
    
            var madreParameter = madre != null ?
                new ObjectParameter("Madre", madre) :
                new ObjectParameter("Madre", typeof(string));
    
            var tutorParameter = tutor != null ?
                new ObjectParameter("Tutor", tutor) :
                new ObjectParameter("Tutor", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var movilParameter = movil != null ?
                new ObjectParameter("Movil", movil) :
                new ObjectParameter("Movil", typeof(string));
    
            var añoParameter = año != null ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(string));
    
            var cursoParameter = curso != null ?
                new ObjectParameter("Curso", curso) :
                new ObjectParameter("Curso", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarEstudiante", idParameter, nombreParameter, padreParameter, madreParameter, tutorParameter, telefonoParameter, movilParameter, añoParameter, cursoParameter);
        }
    
        public virtual int sp_EditarPago(Nullable<int> iDPago, Nullable<int> mensualidad, Nullable<int> mesesPagos)
        {
            var iDPagoParameter = iDPago.HasValue ?
                new ObjectParameter("IDPago", iDPago) :
                new ObjectParameter("IDPago", typeof(int));
    
            var mensualidadParameter = mensualidad.HasValue ?
                new ObjectParameter("Mensualidad", mensualidad) :
                new ObjectParameter("Mensualidad", typeof(int));
    
            var mesesPagosParameter = mesesPagos.HasValue ?
                new ObjectParameter("MesesPagos", mesesPagos) :
                new ObjectParameter("MesesPagos", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarPago", iDPagoParameter, mensualidadParameter, mesesPagosParameter);
        }
    
        public virtual int sp_EliminarEstudiante(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarEstudiante", idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_insertarAdmin(Nullable<int> inscripcion, Nullable<int> mensualidad)
        {
            var inscripcionParameter = inscripcion.HasValue ?
                new ObjectParameter("Inscripcion", inscripcion) :
                new ObjectParameter("Inscripcion", typeof(int));
    
            var mensualidadParameter = mensualidad.HasValue ?
                new ObjectParameter("Mensualidad", mensualidad) :
                new ObjectParameter("Mensualidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertarAdmin", inscripcionParameter, mensualidadParameter);
        }
    
        public virtual int sp_InsertarEstudiante(Nullable<int> iDAdministrador, string nombre, string sexo, string padre, string madre, string tutor, string telefono, string movil, string año, string servicio, string curso, Nullable<int> inscripcion, Nullable<int> mensualidad, Nullable<System.DateTime> fechaPago, Nullable<int> mesesPagos)
        {
            var iDAdministradorParameter = iDAdministrador.HasValue ?
                new ObjectParameter("IDAdministrador", iDAdministrador) :
                new ObjectParameter("IDAdministrador", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var padreParameter = padre != null ?
                new ObjectParameter("Padre", padre) :
                new ObjectParameter("Padre", typeof(string));
    
            var madreParameter = madre != null ?
                new ObjectParameter("Madre", madre) :
                new ObjectParameter("Madre", typeof(string));
    
            var tutorParameter = tutor != null ?
                new ObjectParameter("Tutor", tutor) :
                new ObjectParameter("Tutor", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var movilParameter = movil != null ?
                new ObjectParameter("Movil", movil) :
                new ObjectParameter("Movil", typeof(string));
    
            var añoParameter = año != null ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(string));
    
            var servicioParameter = servicio != null ?
                new ObjectParameter("Servicio", servicio) :
                new ObjectParameter("Servicio", typeof(string));
    
            var cursoParameter = curso != null ?
                new ObjectParameter("Curso", curso) :
                new ObjectParameter("Curso", typeof(string));
    
            var inscripcionParameter = inscripcion.HasValue ?
                new ObjectParameter("Inscripcion", inscripcion) :
                new ObjectParameter("Inscripcion", typeof(int));
    
            var mensualidadParameter = mensualidad.HasValue ?
                new ObjectParameter("Mensualidad", mensualidad) :
                new ObjectParameter("Mensualidad", typeof(int));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("FechaPago", fechaPago) :
                new ObjectParameter("FechaPago", typeof(System.DateTime));
    
            var mesesPagosParameter = mesesPagos.HasValue ?
                new ObjectParameter("MesesPagos", mesesPagos) :
                new ObjectParameter("MesesPagos", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarEstudiante", iDAdministradorParameter, nombreParameter, sexoParameter, padreParameter, madreParameter, tutorParameter, telefonoParameter, movilParameter, añoParameter, servicioParameter, cursoParameter, inscripcionParameter, mensualidadParameter, fechaPagoParameter, mesesPagosParameter);
        }
    
        public virtual int sp_InsertarFactura(Nullable<int> mesesPagos)
        {
            var mesesPagosParameter = mesesPagos.HasValue ?
                new ObjectParameter("MesesPagos", mesesPagos) :
                new ObjectParameter("MesesPagos", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarFactura", mesesPagosParameter);
        }
    
        public virtual int sp_InsertarPago(Nullable<int> inscripcion, Nullable<int> mensualidad, Nullable<System.DateTime> fechaPago)
        {
            var inscripcionParameter = inscripcion.HasValue ?
                new ObjectParameter("Inscripcion", inscripcion) :
                new ObjectParameter("Inscripcion", typeof(int));
    
            var mensualidadParameter = mensualidad.HasValue ?
                new ObjectParameter("Mensualidad", mensualidad) :
                new ObjectParameter("Mensualidad", typeof(int));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("FechaPago", fechaPago) :
                new ObjectParameter("FechaPago", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarPago", inscripcionParameter, mensualidadParameter, fechaPagoParameter);
        }
    
        public virtual int sp_InstertarEstudiante(string nombre, string sexo, string padre, string madre, string tutor, string telefono, string movil, string año, string servicio, string curso)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var padreParameter = padre != null ?
                new ObjectParameter("Padre", padre) :
                new ObjectParameter("Padre", typeof(string));
    
            var madreParameter = madre != null ?
                new ObjectParameter("Madre", madre) :
                new ObjectParameter("Madre", typeof(string));
    
            var tutorParameter = tutor != null ?
                new ObjectParameter("Tutor", tutor) :
                new ObjectParameter("Tutor", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var movilParameter = movil != null ?
                new ObjectParameter("Movil", movil) :
                new ObjectParameter("Movil", typeof(string));
    
            var añoParameter = año != null ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(string));
    
            var servicioParameter = servicio != null ?
                new ObjectParameter("Servicio", servicio) :
                new ObjectParameter("Servicio", typeof(string));
    
            var cursoParameter = curso != null ?
                new ObjectParameter("Curso", curso) :
                new ObjectParameter("Curso", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InstertarEstudiante", nombreParameter, sexoParameter, padreParameter, madreParameter, tutorParameter, telefonoParameter, movilParameter, añoParameter, servicioParameter, cursoParameter);
        }
    
        public virtual ObjectResult<sp_MostrarAdministrador_Result> sp_MostrarAdministrador()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MostrarAdministrador_Result>("sp_MostrarAdministrador");
        }
    
        public virtual ObjectResult<sp_MostrarEstudiante_Result> sp_MostrarEstudiante()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MostrarEstudiante_Result>("sp_MostrarEstudiante");
        }
    
        public virtual ObjectResult<sp_MostrarPago_Result> sp_MostrarPago()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MostrarPago_Result>("sp_MostrarPago");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
